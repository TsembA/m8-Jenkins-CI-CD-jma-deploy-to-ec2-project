#!/usr/bin/env groovy

library identifier: 'jenkins-shared-library@master', retriever: modernSCM(
    [$class: 'GitSCMSource',
    remote: 'https://github.com/TsembA/jma-deploy-to-ec2/blob/master/Jenkinsfile-SharedLibrary',
    credentialsID: 'github-credentials'
    ]
)

pipeline {
    agent any
    tools {
        maven 'maven-3.9'
    }
    environment {
        DOCKER_REGISTRY = 'tsemb'
        DOCKER_REPO = 'demo-app'
        DOCKER_TAG = "java-maven-${env.BUILD_NUMBER}"
        IMAGE_NAME = "${DOCKER_REGISTRY}/${DOCKER_REPO}:${DOCKER_TAG}"
        EC2_HOST = 'ec2-user@54.224.69.3'
        SSH_CREDENTIALS_ID = 'ec2-server-key'
    }

    stages {
        stage('Increment version') {
            steps {
                script {
                    echo 'Generating dynamic image tag...'
                    sh 'mvn build-helper:parse-version versions:set -DnewVersion=\\${parsedVersion.majorVersion}.\\${parsedVersion.minorVersion}.\\${parsedVersion.nextIncrementalVersion} versions:commit'
                    def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                    def version = matcher[0][1]
                    env.DOCKER_TAG = "${version}-${env.BUILD_NUMBER}"
                    env.IMAGE_NAME = "${env.DOCKER_REGISTRY}/${env.DOCKER_REPO}:${env.DOCKER_TAG}"
                }
            }
        }

        stage('Build App') {
            steps {
                echo 'Building application jar...'
                buildJar()
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${IMAGE_NAME}"
                    buildImage(env.IMAGE_NAME)
                    dockerLogin()
                    dockerPush(env.IMAGE_NAME)
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    echo "Deploying ${IMAGE_NAME} to EC2..."
                    def deployCmd = """
                        docker stop demo-app || true &&
                        docker rm demo-app || true &&
                        docker pull ${IMAGE_NAME} &&
                        docker run -d --name demo-app -p 3080:3080 ${IMAGE_NAME}
                    """.trim()

                    sshagent([env.SSH_CREDENTIALS_ID]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${EC2_HOST} '${deployCmd}'
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment successful: ${IMAGE_NAME}"
        }
        failure {
            echo "❌ Deployment failed."
        }
    }
}
